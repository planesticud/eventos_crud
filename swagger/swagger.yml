swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /participante_sesion/:
    get:
      tags:
      - participante_sesion
      description: get ParticipanteSesion
      operationId: ParticipanteSesionController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ParticipanteSesion'
        "403":
          description: ""
    post:
      tags:
      - participante_sesion
      description: create ParticipanteSesion
      operationId: ParticipanteSesionController.Post
      parameters:
      - in: body
        name: body
        description: body for ParticipanteSesion content
        required: true
        schema:
          $ref: '#/definitions/models.ParticipanteSesion'
      responses:
        "201":
          description: '{int} models.ParticipanteSesion'
        "403":
          description: body is empty
  /participante_sesion/{id}:
    get:
      tags:
      - participante_sesion
      description: get ParticipanteSesion by id
      operationId: ParticipanteSesionController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ParticipanteSesion'
        "403":
          description: :id is empty
    put:
      tags:
      - participante_sesion
      description: update the ParticipanteSesion
      operationId: ParticipanteSesionController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for ParticipanteSesion content
        required: true
        schema:
          $ref: '#/definitions/models.ParticipanteSesion'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ParticipanteSesion'
        "403":
          description: :id is not int
    delete:
      tags:
      - participante_sesion
      description: delete the ParticipanteSesion
      operationId: ParticipanteSesionController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /relacion_sesiones/:
    get:
      tags:
      - relacion_sesiones
      description: get RelacionSesiones
      operationId: RelacionSesionesController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.RelacionSesiones'
        "403":
          description: ""
    post:
      tags:
      - relacion_sesiones
      description: create RelacionSesiones
      operationId: RelacionSesionesController.Post
      parameters:
      - in: body
        name: body
        description: body for RelacionSesiones content
        required: true
        schema:
          $ref: '#/definitions/models.RelacionSesiones'
      responses:
        "201":
          description: '{int} models.RelacionSesiones'
        "403":
          description: body is empty
  /relacion_sesiones/{id}:
    get:
      tags:
      - relacion_sesiones
      description: get RelacionSesiones by id
      operationId: RelacionSesionesController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.RelacionSesiones'
        "403":
          description: :id is empty
    put:
      tags:
      - relacion_sesiones
      description: update the RelacionSesiones
      operationId: RelacionSesionesController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for RelacionSesiones content
        required: true
        schema:
          $ref: '#/definitions/models.RelacionSesiones'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.RelacionSesiones'
        "403":
          description: :id is not int
    delete:
      tags:
      - relacion_sesiones
      description: delete the RelacionSesiones
      operationId: RelacionSesionesController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /rol_participante_sesion/:
    get:
      tags:
      - rol_participante_sesion
      description: get RolParticipanteSesion
      operationId: RolParticipanteSesionController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.RolParticipanteSesion'
        "403":
          description: ""
    post:
      tags:
      - rol_participante_sesion
      description: create RolParticipanteSesion
      operationId: RolParticipanteSesionController.Post
      parameters:
      - in: body
        name: body
        description: body for RolParticipanteSesion content
        required: true
        schema:
          $ref: '#/definitions/models.RolParticipanteSesion'
      responses:
        "201":
          description: '{int} models.RolParticipanteSesion'
        "403":
          description: body is empty
  /rol_participante_sesion/{id}:
    get:
      tags:
      - rol_participante_sesion
      description: get RolParticipanteSesion by id
      operationId: RolParticipanteSesionController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.RolParticipanteSesion'
        "403":
          description: :id is empty
    put:
      tags:
      - rol_participante_sesion
      description: update the RolParticipanteSesion
      operationId: RolParticipanteSesionController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for RolParticipanteSesion content
        required: true
        schema:
          $ref: '#/definitions/models.RolParticipanteSesion'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.RolParticipanteSesion'
        "403":
          description: :id is not int
    delete:
      tags:
      - rol_participante_sesion
      description: delete the RolParticipanteSesion
      operationId: RolParticipanteSesionController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /sesion/:
    get:
      tags:
      - sesion
      description: get Sesion
      operationId: SesionController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Sesion'
        "403":
          description: ""
    post:
      tags:
      - sesion
      description: create Sesion
      operationId: SesionController.Post
      parameters:
      - in: body
        name: body
        description: body for Sesion content
        required: true
        schema:
          $ref: '#/definitions/models.Sesion'
      responses:
        "201":
          description: '{int} models.Sesion'
        "403":
          description: body is empty
  /sesion/{id}:
    get:
      tags:
      - sesion
      description: get Sesion by id
      operationId: SesionController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Sesion'
        "403":
          description: :id is empty
    put:
      tags:
      - sesion
      description: update the Sesion
      operationId: SesionController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Sesion content
        required: true
        schema:
          $ref: '#/definitions/models.Sesion'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Sesion'
        "403":
          description: :id is not int
    delete:
      tags:
      - sesion
      description: delete the Sesion
      operationId: SesionController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /tipo_sesion/:
    get:
      tags:
      - tipo_sesion
      description: get TipoSesion
      operationId: TipoSesionController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.TipoSesion'
        "403":
          description: ""
    post:
      tags:
      - tipo_sesion
      description: create TipoSesion
      operationId: TipoSesionController.Post
      parameters:
      - in: body
        name: body
        description: body for TipoSesion content
        required: true
        schema:
          $ref: '#/definitions/models.TipoSesion'
      responses:
        "201":
          description: '{int} models.TipoSesion'
        "403":
          description: body is empty
  /tipo_sesion/{id}:
    get:
      tags:
      - tipo_sesion
      description: get TipoSesion by id
      operationId: TipoSesionController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.TipoSesion'
        "403":
          description: :id is empty
    put:
      tags:
      - tipo_sesion
      description: update the TipoSesion
      operationId: TipoSesionController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for TipoSesion content
        required: true
        schema:
          $ref: '#/definitions/models.TipoSesion'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.TipoSesion'
        "403":
          description: :id is not int
    delete:
      tags:
      - tipo_sesion
      description: delete the TipoSesion
      operationId: TipoSesionController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
definitions:
  models.ParticipanteSesion:
    title: ParticipanteSesion
    type: object
    properties:
      Ente:
        type: integer
        format: int64
      Id:
        type: integer
        format: int64
      RolParticipanteSesion:
        $ref: '#/definitions/models.RolParticipanteSesion'
      Sesion:
        $ref: '#/definitions/models.Sesion'
  models.RelacionSesiones:
    title: RelacionSesiones
    type: object
    properties:
      Id:
        type: integer
        format: int64
      SesionHijo:
        $ref: '#/definitions/models.Sesion'
      SesionPadre:
        $ref: '#/definitions/models.Sesion'
  models.RolParticipanteSesion:
    title: RolParticipanteSesion
    type: object
    properties:
      Activo:
        type: boolean
      CodigoAbreviacion:
        type: string
      Descripcion:
        type: string
      Id:
        type: integer
        format: int64
      Nombre:
        type: string
      NumeroOrden:
        type: number
        format: double
  models.Sesion:
    title: Sesion
    type: object
    properties:
      Descripcion:
        type: string
      FechaCreacion:
        type: string
        format: datetime
      FechaFin:
        type: string
        format: datetime
      FechaInicio:
        type: string
        format: datetime
      FechaModificacion:
        type: string
        format: datetime
      Id:
        type: integer
        format: int64
      NumeroRecurrencias:
        type: integer
        format: int64
      Periodo:
        type: integer
        format: int64
      Recurrente:
        type: boolean
      TipoSesion:
        $ref: '#/definitions/models.TipoSesion'
  models.TipoSesion:
    title: TipoSesion
    type: object
    properties:
      Activo:
        type: boolean
      CodigoAbreviacion:
        type: string
      Descripcion:
        type: string
      Id:
        type: integer
        format: int64
      Nombre:
        type: string
      NumeroOrden:
        type: number
        format: double
tags:
- name: tipo_sesion
  description: |
    TipoSesionController operations for TipoSesion
- name: rol_participante_sesion
  description: |
    RolParticipanteSesionController operations for RolParticipanteSesion
- name: participante_sesion
  description: |
    ParticipanteSesionController operations for ParticipanteSesion
- name: sesion
  description: |
    SesionController operations for Sesion
- name: relacion_sesiones
  description: |
    RelacionSesionesController operations for RelacionSesiones
